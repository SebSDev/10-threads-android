package de.thro.inf.prg3.a10;

import android.view.View;
import android.widget.ProgressBar;

import com.github.lzyzsd.circleprogress.CircleProgress;

import java.util.concurrent.atomic.AtomicInteger;

import de.thro.inf.prg3.a10.kitchen.KitchenHatch;

/**
 * Utility report progress of producers and consumers to the UI
 *
 * @author Peter Kurfer
 */

public class ProgressReporter
{

    private final KitchenHatch kitchenHatch;
    private final ProgressBar kitchenBusyIndicator;
    private final ProgressBar waiterBusyIndicator;
    private final CircleProgress orderQueueProgress;
    private final CircleProgress kitchenHatchProgress;
    private final AtomicInteger cookCount;
    private final AtomicInteger waiterCount;
    private final double totalOrderCount;
    private final double maxMeals;

    private ProgressReporter(KitchenHatch kitchenHatch, ProgressBar kitchenBusyIndicator,
                             ProgressBar waiterBusyIndicator, CircleProgress orderQueueProgress,
                             CircleProgress kitchenHatchProgress, int cookCount, int waiterCount)
    {
        this.kitchenHatch = kitchenHatch;
        this.kitchenBusyIndicator = kitchenBusyIndicator;
        this.waiterBusyIndicator = waiterBusyIndicator;
        this.orderQueueProgress = orderQueueProgress;
        this.kitchenHatchProgress = kitchenHatchProgress;
        this.cookCount = new AtomicInteger(cookCount);
        this.waiterCount = new AtomicInteger(waiterCount);

        /* fallback if app is started bevor the kitchen hatch is implemented */
        this.totalOrderCount = this.kitchenHatch != null ? this.kitchenHatch.getOrderCount() : 0;
        this.maxMeals = this.kitchenHatch != null ? this.kitchenHatch.getMaxDishes() : 1;
    }

    /**
     * Updates the queue depth visualizations of the order queue and kitchen hatch queue
     */
    public void updateProgress()
    {
        if (kitchenHatch != null)
        {
            orderQueueProgress.post(() -> orderQueueProgress.setProgress((int) ((kitchenHatch
                    .getOrderCount() / totalOrderCount) * 100)));
            kitchenHatchProgress.post(() -> kitchenHatchProgress.setProgress((int) ((kitchenHatch
                    .getDishesCount() / maxMeals) * 100)));
        }
    }

    /**
     * Notifies the reporter that a cook left
     * if no cooks are working anymore the busy indicator is removed from the view
     */
    public void notifyCookLeaving()
    {
        int currentCookCount = cookCount.decrementAndGet();
        if (currentCookCount == 0)
        {
            /* hiding busy indicator to show that no cook is active any more */
            kitchenBusyIndicator.post(() -> kitchenBusyIndicator.setVisibility(View.INVISIBLE));
        }
    }

    /**
     * Notifies the reporter that a waiter left
     * if no waiters are working anymore the busy indicator is removed from the view
     */
    public void notifyWaiterLeaving()
    {
        int currentWaiterCount = waiterCount.decrementAndGet();
        if (currentWaiterCount == 0)
        {
            /* hiding busy indicator to show that no waiter is active any more */
            waiterBusyIndicator.post(() -> waiterBusyIndicator.setVisibility(View.INVISIBLE));
        }
    }

    /**
     * Builder class for the ProgressBuilder to get a fluent interface
     * Generated by IntelliJ
     */
    public static class ProgressReporterBuilder
    {
        private KitchenHatch kitchenHatch;
        private ProgressBar kitchenBusyIndicator;
        private ProgressBar waiterBusyIndicator;
        private CircleProgress orderQueueProgress;
        private CircleProgress kitchenHatchProgress;
        private int cookCount;
        private int waiterCount;

        public ProgressReporterBuilder setKitchenHatch(KitchenHatch kitchenHatch)
        {
            this.kitchenHatch = kitchenHatch;
            return this;
        }

        public ProgressReporterBuilder setKitchenBusyIndicator(ProgressBar kitchenBusyIndicator)
        {
            this.kitchenBusyIndicator = kitchenBusyIndicator;
            return this;
        }

        public ProgressReporterBuilder setWaiterBusyIndicator(ProgressBar waiterBusyIndicator)
        {
            this.waiterBusyIndicator = waiterBusyIndicator;
            return this;
        }

        public ProgressReporterBuilder setOrderQueueProgress(CircleProgress orderQueueProgress)
        {
            this.orderQueueProgress = orderQueueProgress;
            return this;
        }

        public ProgressReporterBuilder setKitchenHatchProgress(CircleProgress kitchenHatchProgress)
        {
            this.kitchenHatchProgress = kitchenHatchProgress;
            return this;
        }

        public ProgressReporterBuilder setCookCount(int cookCount)
        {
            this.cookCount = cookCount;
            return this;
        }

        public ProgressReporterBuilder setWaiterCount(int waiterCount)
        {
            this.waiterCount = waiterCount;
            return this;
        }

        public ProgressReporter createProgressReporter()
        {
            return new ProgressReporter(kitchenHatch, kitchenBusyIndicator, waiterBusyIndicator, orderQueueProgress, kitchenHatchProgress, cookCount, waiterCount);
        }
    }
}
